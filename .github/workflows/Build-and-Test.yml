name: Build-and-Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  VULKAN_SDK: ./VULKAN_SDK

jobs:
  windows:
    strategy:
      matrix:
        buildtype: [Debug, Release]
        msvcver: [2019, 2022]
      fail-fast: false

    name: Windows-${{matrix.buildtype}}-VS${{matrix.msvcver}}
    runs-on: windows-${{matrix.msvcver}}

    env:
      job_name: Windows-${{matrix.buildtype}}-VS${{matrix.msvcver}}
      CMAKE_BUILD_TYPE: ${{matrix.buildtype}}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        lfs: true

    - name: Install dependencies
      uses: ./.github/actions/install-dependencies

    - name: Setup OpenCppCoverage
      run: |
        choco install OpenCppCoverage -y
        echo "C:\Program Files\OpenCppCoverage" >> $env:GITHUB_PATH

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build --preset msvc${{matrix.msvcver}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.buildtype}}

    - name: Save CMake output log
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: CMakeOutput-${{env.job_name}}
        path: ${{github.workspace}}/build/CMakeFiles/CMakeOutput.log

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: python ${{github.workspace}}/tools/coverage.py ci ${{github.workspace}} ${{matrix.buildtype}}

    - name: Save test log
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: TestLog-${{env.job_name}}
        path: build/Testing/Temporary/LastTest.log

    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        fail_ci_if_error: false
        functionalities: fix

    - name: Save coverage report
      uses: actions/upload-artifact@v3
      with:
        name: CoverageReport-${{env.job_name}}
        path: ./coverage.xml

  linux:
    strategy:
      matrix:
        buildtype: [Debug, Release]
        preset: [linux]

    name: Linux-${{matrix.buildtype}}
    runs-on: ubuntu-latest

    env:
      job_name: Linux-${{matrix.buildtype}}
      CMAKE_BUILD_TYPE: ${{matrix.buildtype}}
      GTEST_FILTER: -SurfaceTest.*
      ASAN_OPTIONS: detect_leaks=0 # Vulkan on Linux appears to leak memory, so disable leak checks

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        lfs: true

    - name: Install dependencies
      uses: ./.github/actions/install-dependencies

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build --preset ${{matrix.preset}} -DCMAKE_CXX_COMPILER=g++-11

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.buildtype}}

    - name: Save CMake output log
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: CMakeOutput-${{env.job_name}}
        path: ${{github.workspace}}/build/CMakeFiles/CMakeOutput.log

    - name: Test
      run: |
        VK_ICD_FILENAMES=${{github.workspace}}/swiftshader/lib/vk_swiftshader_icd.json ctest --test-dir ${{github.workspace}}/build --verbose -C ${{matrix.buildtype}}

    - name: Save test log
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: TestLog-${{env.job_name}}
        path: Testing/Temporary/LastTest.log
