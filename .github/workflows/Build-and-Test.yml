name: Build-and-Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  VULKAN_VERSION: 1.2.198
  VULKAN_SDK: ./VULKAN_SDK

jobs:
  windows:
    strategy:
      matrix:
        buildtype: [Debug, Release]
        preset: [msvc2019]

    name: Build-and-Test-Windows-${{matrix.buildtype}}
    runs-on: windows-latest

    env:
      CMAKE_BUILD_TYPE: ${{matrix.buildtype}}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Cache Vulkan SDK
      uses: actions/cache@v2
      id: cache-vulkan
      with:
        path: ${{env.VULKAN_SDK}}
        key: vulkan-${{env.VULKAN_VERSION}}-${{runner.os}}

    - name: Setup Vulkan SDK
      if: steps.cache-vulkan.outputs.cache-hit != 'true'
      uses: humbletim/setup-vulkan-sdk@v1.0.3
      with:
        vulkan-version: sdk-${{env.VULKAN_VERSION}}

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v10
      with:
        vcpkgGitCommitId: '2a31089e777fc187f1cc05338250b8e1810cfb52'

    - name: Setup OpenCppCoverage
      run: |
        choco install OpenCppCoverage -y
        echo "C:\Program Files\OpenCppCoverage" >> $env:GITHUB_PATH

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build --preset ${{matrix.preset}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.buildtype}}

    - name: Enable Swiftshader
      run: |
        copy ${{github.workspace}}\thirdparty\swiftshader\vulkan-1.dll ${{github.workspace}}\build\${{matrix.buildtype}}\
        dir ${{github.workspace}}\build\${{matrix.buildtype}}\

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: OpenCppCoverage --export_type cobertura:${{github.workspace}}/coverage.xml --modules "*.exe" --sources source --cover_children -- ctest -C ${{matrix.buildtype}}

    - name: Upload test log
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: TestLog-Windows-${{matrix.buildtype}}
        path: build/Testing/Temporary/LastTest.log

    - name: Upload coverage report
      uses: codecov/codecov-action@v1.3.2
      with:
        files: ./coverage.xml
        fail_ci_if_error: true
        functionalities: fix

  linux:
    strategy:
      matrix:
        buildtype: [Debug, Release]
        preset: [unix]

    name: Build-and-Test-Linux-${{matrix.buildtype}}
    runs-on: ubuntu-latest

    env:
      CMAKE_BUILD_TYPE: ${{matrix.buildtype}}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # This step is only needed as long as assimp depends on irrlicht.
    # If the dependency is removed, this step can be removed.
    - name: Install Irrlicht dependencies
      run: |
          sudo apt-get update
          sudo apt install libgl1-mesa-dev libxxf86vm-dev

    - name: Cache Vulkan SDK
      uses: actions/cache@v2
      id: cache-vulkan
      with:
        path: ${{env.VULKAN_SDK}}
        key: vulkan-${{env.VULKAN_VERSION}}-${{runner.os}}

    - name: Setup Vulkan SDK
      if: steps.cache-vulkan.outputs.cache-hit != 'true'
      uses: humbletim/setup-vulkan-sdk@v1.0.3
      with:
        vulkan-version: sdk-${{env.VULKAN_VERSION}}

    - name: Install Irrlicht dependencies
      run: |
          sudo apt-get update
          sudo apt install libgl1-mesa-dev libxxf86vm-dev

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v10
      with:
        vcpkgGitCommitId: '2a31089e777fc187f1cc05338250b8e1810cfb52'

    - name: Install GCC 11
      run: |
          sudo apt-get update
          sudo apt install gcc-11 g++-11

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build --preset ${{matrix.preset}} -DCMAKE_CXX_COMPILER=g++-11

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.buildtype}}

    - name: Enable Swiftshader
      run: cp ${{github.workspace}}/thirdparty/swiftshader/vulkan-1.so ${{github.workspace}}/build/

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{matrix.buildtype}}

    - name: Upload test log
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: TestLog-Linux-${{matrix.buildtype}}
        path: build/Testing/Temporary/LastTest.log
