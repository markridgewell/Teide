name: Build-and-Test

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:
    inputs:
      profile-cmake:
        description: 'Enable CMake trace'
        required: true
        default: false
        type: boolean
      coverage:
        description: 'Enable code coverage'
        required: true
        default: true
        type: boolean
      debug:
        description: 'Enable debug logging'
        required: true
        default: false
        type: boolean
      ccache:
        description: 'Enable ccache'
        required: true
        default: true
        type: boolean

env:
  VULKAN_SDK: ../vulkan_sdk

  use_ccache: ${{ inputs.ccache || github.event_name == 'pull_request' }}
  CCACHE_DEBUG: ${{ inputs.debug && '1' || '' }}
  CCACHE_DEBUGLLEVEL: 1
  CCACHE_DEBUGDIR: ${{ github.workspace }}/ccache_debug
  CCACHE_LOGFILE: ${{ github.workspace }}/ccache.log

  EXTRA_CMAKE_FLAGS: ${{inputs.profile-cmake && '--trace-expand --profiling-format=google-trace --profiling-output=CMakeTrace.json' || ''}}

jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        preset: [msvc2022, msvc2022-clang, g++-14, clang++-18]
        buildtype: [Debug, Release]
        sanitizer: [OFF]
        include:
        # Overrides
        - coverage: OFF
        - preset: msvc2022
          runner: windows-2022
          coverage: ${{toJSON(inputs.coverage) != 'false' && 'ON' || 'OFF'}}
        - preset: msvc2022-clang
          runner: windows-2022
        - preset: g++-14
          runner: ubuntu-24.04
          extra-packages: ninja-build g++-14
        - preset: clang++-18
          runner: ubuntu-24.04
          extra-packages: ninja-build clang++-18
          coverage: ${{toJSON(inputs.coverage) != 'false' && 'ON' || 'OFF'}}

        # Additional jobs
        - preset: clang++-18
          buildtype: Debug
          runner: ubuntu-24.04
          extra-packages: ninja-build clang++-18
          sanitizer: ASAN
          name-suffix: -asan
        - preset: clang++-18
          buildtype: Debug
          runner: ubuntu-24.04
          extra-packages: ninja-build clang++-18
          sanitizer: UBSAN
          name-suffix: -ubsan

    name: ${{startsWith(matrix.runner, 'windows') && 'Windows' || 'Linux'}}-${{matrix.buildtype}}-${{matrix.preset}}${{matrix.name-suffix}}
    runs-on: ${{matrix.runner}}

    env:
      job_name: ${{startsWith(matrix.runner, 'windows') && 'Windows' || 'Linux'}}-${{matrix.buildtype}}-${{matrix.preset}}${{matrix.name-suffix}}
      CMAKE_BUILD_TYPE: ${{matrix.buildtype}}
      RT_OUTPUT_DIR: build/${{matrix.preset}}/tests/RenderTest/RenderTestOutput

    outputs:
      rendertest-failures: ${{steps.rendertest.outputs.failure == 'true'}}
      rendertest-successes: ${{steps.rendertest.outputs.success == 'true'}}

    steps:
    - name: Checkout
      uses: actions/checkout@v4.2.2
      with:
        lfs: true
        submodules: false

    - name: Install packages
      id: packages
      uses: ./.github/actions/install-packages
      with:
        sanitizer: ${{matrix.sanitizer}}

    - name: Install dependencies
      uses: ./.github/actions/install-dependencies
      with:
        extra-packages: ${{matrix.extra-packages}} ${{ env.use_ccache && 'ccache' || '' }}

    - name: Setup ccache
      if: env.use_ccache
      shell: bash
      run: |
        if [[ ${{ inputs.debug || runner.debug }} != false ]]; then
          echo -n "CCACHE_DEBUG=1" >> $GITHUB_ENV
        fi
        echo -n "CCACHE_DIR=$(ccache -k cache_dir)" >> $GITHUB_ENV

        echo "ccache -k cache_dir  ->  $(ccache -k cache_dir)"
        echo "ccache -k debug_dir  ->  $(ccache -k debug_dir)"
        echo "ccache -k debug  ->  $(ccache -k debug)"
        echo "ccache -k debug_level  ->  $(ccache -k debug_level)"
        echo "ccache -k log_file  ->  $(ccache -k log_file)"

    - name: Save/restore ccache dir
      # I heard you like caches, so I put some caches in your caches
      if: env.use_ccache
      uses: actions/cache@v4
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ccache-${{ env.job_name }}-${{ github.run_id }}
        restore-keys: |
          ccache-${{ env.job_name }}

    - if: matrix.coverage == 'ON' && runner.os == 'Windows'
      name: Install OpenCppCoverage
      uses: ./.github/actions/choco-install
      with:
        package-name: OpenCppCoverage
        package-version: 0.9.9.0

    - name: Configure CMake
      run: >
        cmake --preset ${{matrix.preset}}
        -DTEIDE_USE_VCPKG=${{!steps.packages.outputs.success}}
        -DCMAKE_PREFIX_PATH=${{steps.packages.outputs.install-dir}}
        -DTEIDE_CCACHE=${{env.use_ccache}}
        -DTEIDE_PRECOMPILED_HEADERS=${{!env.use_ccache}}
        -DTEIDE_UNIT_TEST_SW_RENDER=ON
        -DTEIDE_TEST_WINDOWLESS=${{runner.os == 'Linux'}}
        -DTEIDE_TEST_COVERAGE=${{matrix.coverage}}
        -DTEIDE_TEST_VERBOSE=${{runner.debug || inputs.debug}}
        -DTEIDE_SANITIZER=${{matrix.sanitizer}}
        -DCMAKE_CONFIGURATION_TYPES=${{matrix.buildtype}}
        -DCMAKE_TRY_COMPILE_CONFIGURATION=${{matrix.buildtype}}
        ${{env.EXTRA_CMAKE_FLAGS}}

    - name: Save CMake trace
      if: always() && inputs.profile-cmake
      uses: actions/upload-artifact@v4.5.0
      with:
        name: CMakeTrace-${{env.job_name}}
        path: ./CMakeTrace.json

    - name: Build
      shell: bash
      run: |
        mkdir -p ${{ env.CCACHE_DIR }}
        ccache --zero-stats

        cmake --build --preset ${{matrix.preset}} --config ${{matrix.buildtype}}

        echo "::group::Ccache stats"
        ccache -sv
        echo "::endgroup::"

        echo "::group::Ccache config"
        ccache -p
        echo "::endgroup::"

        echo "::group::Ccache log"
        ls $CCACHE_LOGFILE
        cat $CCACHE_LOGFILE
        echo "::endgroup::"

    - name: Dump CMake output logs
      if: failure()
      shell: bash
      run: |
        paths="external/vcpkg build/${{matrix.preset}}"
        for file in $(find $paths -name '*.log'); do
            if [ -s $file ]; then
                echo "::group::$file"
                cat $file
                echo "::endgroup::"
            fi
        done

    - name: Test
      id: test
      env: {GTEST_CATCH_EXCEPTIONS: 0}
      run: ctest --preset ${{matrix.preset}} --build-config ${{matrix.buildtype}} --verbose --output-on-failure --no-tests=error

    - name: Save render test output
      if: failure() && steps.test.outcome == 'failure'
      uses: actions/upload-artifact@v4.5.0
      with:
        name: RenderTestOutput-${{env.job_name}}
        path: ${{env.RT_OUTPUT_DIR}}

    - name: Record render test outcome
      id: rendertest
      if: always()
      shell: bash
      run: |
        if [ -d "$RT_OUTPUT_DIR" ]; then
          echo "failure=true" >> "$GITHUB_OUTPUT"
        else
          echo "success=true" >> "$GITHUB_OUTPUT"
        fi

    - name: Save test log
      if: failure() && steps.test.outcome == 'failure'
      uses: actions/upload-artifact@v4.5.0
      with:
        name: TestLog-${{env.job_name}}
        path: build/${{matrix.preset}}/Testing/Temporary/LastTest.log

    - name: Upload coverage report
      if: matrix.coverage == 'ON'
      uses: codecov/codecov-action@v5.1.2
      with:
        directory: build/${{matrix.preset}}/coverage/output
        fail_ci_if_error: false
        verbose: true

    - name: Save coverage report
      if: matrix.coverage == 'ON'
      uses: actions/upload-artifact@v4.5.0
      with:
        name: CoverageReport-${{env.job_name}}
        path: build/${{matrix.preset}}/coverage/output


  render-test-report:
    name: Render-Test-Report
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: failure()
    env:
      GH_TOKEN: ${{github.token}}
      ANY_PASSED: "${{needs.build-and-test.outputs.rendertest-successes}}"
      ANY_FAILED: "${{needs.build-and-test.outputs.rendertest-failures}}"

    steps:
    - uses: actions/download-artifact@v4.1.8
      if: needs.build-and-test.outputs.rendertest-failures
      with:
        path: artifacts

    - name: Generate summary
      run: |
        if $ANY_FAILED; then
          URL="https://markridgewell.github.io/TeideStats/rendertest.html?run_id=${{github.run_id}}"
          echo "Render tests failed. [Click for details]($URL)" >> $GITHUB_STEP_SUMMARY
        else
          echo "Render tests passed." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Display structure of downloaded files
      if: needs.build-and-test.outputs.rendertest-failures
      run: ls -R
      working-directory: artifacts


  time-report:
    name: Time-Report
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.event_name == 'push'
    env:
      GH_TOKEN: ${{github.token}}

    steps:
    - name: Get workflow run data
      run: |
        echo "Build-and-Test workflow completed, run_id: ${{github.run_id}}"
        echo -n '{"run_data":' > ${{github.sha}}.json
        gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${{github.repository}}/actions/runs/${{github.run_id}} \
          >> ${{github.sha}}.json
        echo -n ', "job_data":' >> ${{github.sha}}.json
        gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${{github.repository}}/actions/runs/${{github.run_id}}/jobs \
          >> ${{github.sha}}.json
        echo -n '}' >> ${{github.sha}}.json

    - name: Push workflow run data
      uses: dmnemec/copy_file_to_another_repo_action@v1.1.1
      env:
        API_TOKEN_GITHUB: ${{secrets.API_TOKEN_TEIDESTATS}}
      with:
        source_file: '${{github.sha}}.json'
        destination_repo: '${{github.repository}}Stats'
        destination_folder: 'build_times'
        user_email: '${{github.actor_id}}+${{github.actor}}@users.noreply.github.com'
        user_name: '${{github.actor}}'
        commit_message: 'Add workflow run for commit ${{github.sha}}'
