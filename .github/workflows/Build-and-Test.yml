name: Build-and-Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  VULKAN_SDK: ./VULKAN_SDK

jobs:
  windows:
    strategy:
      fail-fast: false
      matrix:
        buildtype: [Debug, Release]
        preset: [msvc2019, msvc2022, msvc2022-clang]
        include:
        - preset: msvc2019
          runner: windows-2019
        - preset: msvc2022
          runner: windows-2022
        - preset: msvc2022-clang
          runner: windows-2022

    name: Windows-${{matrix.buildtype}}-${{matrix.preset}}
    runs-on: ${{matrix.runner}}

    env:
      job_name: Windows-${{matrix.buildtype}}-${{matrix.preset}}
      CMAKE_BUILD_TYPE: ${{matrix.buildtype}}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        lfs: true

    - name: Install dependencies
      uses: ./.github/actions/install-dependencies
      with:
        preset: ${{matrix.preset}}

    - name: Setup OpenCppCoverage
      run: |
        choco install OpenCppCoverage -y
        echo "C:\Program Files\OpenCppCoverage" >> $env:GITHUB_PATH

    - name: Configure CMake
      run: cmake --preset ${{matrix.preset}} -DTEIDE_TEST_VERBOSE=ON -DTEIDE_UNIT_TEST_SW_RENDER=ON

    - name: Build
      run: cmake --build --preset ${{matrix.preset}} --config ${{matrix.buildtype}}

    - name: Save CMake output log
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: CMakeOutput-${{env.job_name}}
        path: ./build/${{matrix.preset}}/CMakeFiles/CMakeOutput.log

    - name: Test
      run: python ./tools/coverage.py ci ${{matrix.preset}} ${{matrix.buildtype}}

    - name: Save render test output
      if: steps.test.outcome == 'failure'
      uses: actions/upload-artifact@v3
      with:
        name: RenderTestOutput-${{env.job_name}}
        path: RenderTestOutput

    - name: Save test log
      if: steps.test.outcome == 'failure'
      uses: actions/upload-artifact@v3
      with:
        name: TestLog-${{env.job_name}}
        path: build/${{matrix.preset}}/Testing/Temporary/LastTest.log

    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        fail_ci_if_error: false
        functionalities: fix

    - name: Save coverage report
      uses: actions/upload-artifact@v3
      with:
        name: CoverageReport-${{env.job_name}}
        path: ./coverage.xml

  linux:
    strategy:
      matrix:
        buildtype: [Debug, Release]
        preset: [linux]
        compiler: [gcc-11, clang-16]
      fail-fast: false

    name: Linux-${{matrix.buildtype}}-${{matrix.compiler}}
    runs-on: ubuntu-latest

    env:
      job_name: Linux-${{matrix.buildtype}}-${{matrix.compiler}}
      CMAKE_CXX_COMPILER: ${{matrix.compiler}}
      CMAKE_BUILD_TYPE: ${{matrix.buildtype}}
      ASAN_OPTIONS: detect_leaks=0 # Vulkan on Linux appears to leak memory, so disable leak checks

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        lfs: true

    - name: Install dependencies
      uses: ./.github/actions/install-dependencies
      with:
        preset: ${{matrix.preset}}
        apt-packages: ${{matrix.compiler}}

    - name: Configure CMake
      run: cmake --preset ${{matrix.preset}} -DTEIDE_TEST_VERBOSE=ON -DTEIDE_UNIT_TEST_SW_RENDER=ON -DTEIDE_TEST_WINDOWLESS=ON

    - name: Build
      run: cmake --build --preset ${{matrix.preset}} --config ${{matrix.buildtype}}

    - name: Save CMake output log
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: CMakeOutput-${{env.job_name}}
        path: ./build/${{matrix.preset}}/CMakeFiles/CMakeOutput.log

    - name: Test
      id: test
      run: ctest --preset ${{matrix.preset}} --build-config ${{matrix.buildtype}} --verbose --no-tests=error

    - name: Save render test output
      if: steps.test.outcome == 'failure'
      uses: actions/upload-artifact@v3
      with:
        name: RenderTestOutput-${{env.job_name}}
        path: RenderTestOutput

    - name: Save test log
      if: steps.test.outcome == 'failure'
      uses: actions/upload-artifact@v3
      with:
        name: TestLog-${{env.job_name}}
        path: build/${{matrix.preset}}/Testing/Temporary/LastTest.log
