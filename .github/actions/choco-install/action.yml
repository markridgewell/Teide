name: 'choco-install'
description: 'Install and cache Chocolatey packages'

inputs:
  package-name:
    description: 'Name of the package to install'
    required: true
  package-version:
    description: 'Version number of the package to install'
    required: true

runs:
  using: composite
  steps:
    - name: Restore from cache
      uses: actions/cache/restore@v3
      id: cache
      with:
        key: ${{runner.os}}-${{inputs.package-name}}-${{inputs.package-version}}
        path: '~/${{inputs.package-name}}/'

    - name: Set cached path variable
      if: steps.cache.outputs.cache-hit == 'true'
      shell: pwsh
      run: |
        # Set cached path variable
        $installPath = Get-Content -Path "~/${{inputs.package-name}}/install.path"
        echo "Restoring to $installPath"
        Copy-Item "~/${{inputs.package-name}}" "$installPath"
        $pathAppend = Get-Content -Path "~/${{inputs.package-name}}/.path"
        echo "Adding $pathAppend to PATH"
        echo "$pathAppend" >> $GITHUB_PATH
        echo "Restored files:"
        Get-ChildItem "$installPath" -Recurse

    - name: Install package
      if: steps.cache.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        # Install package
        $pathBefore = $env:path.split(";")
        choco install --ignorepackageexitcodes ${{inputs.package-name}} --version ${{inputs.package-version}} | Tee-Object -FilePath output.txt
        $installPath = (Get-Content output.txt | Select-String "Software installed to '(.*)'").matches.groups[1]
        echo "Copying $installPath to ~/${{inputs.package-name}}"
        Copy-Item "$installPath" "~/${{inputs.package-name}}"
        echo "$installPath" > "~/${{inputs.package-name}}/install.path"
        echo "Install path: $installPath"
        echo "INSTALL_PATH=$installPath" >> "$env:GITHUB_ENV"
        $env:ChocolateyInstall = Convert-Path "$((Get-Command choco).Path)\..\.."
        Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
        refreshenv
        $pathAppend = $env:path.split(";") | ?{$pathBefore -NotContains $_}
        echo "New entries in PATH: $pathAppend"
        echo "$pathAppend" > "~/${{inputs.package-name}}/.path"
        echo "Contents of ~/${{inputs.package-name}}:"
        Get-ChildItem "~/${{inputs.package-name}}/" -Recurse

    - name: Save to cache
      if: steps.cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        key: ${{steps.cache.outputs.cache-primary-key}}
        path: '~/${{inputs.package-name}}/'
